<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>图片</title>
    <url>/1/</url>
    <content><![CDATA[<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  pie
    title Key elements in Product X
    &quot;Calcium&quot; : 42.96
    &quot;Potassium&quot; : 50.05
    &quot;Magnesium&quot; : 10.01
    &quot;Iron&quot; :  5
  </pre></div>


<div class="timeline red"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p>
</div></div><div class='timeline-item-content'><p>這是測試頁面</p>
</div></div></div>

<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一個Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸彈</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字為第一個Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有圖標 沒有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<div class="note modern"><p>默認 提示塊標籤</p>
</div>

<div class="note default modern"><p>default 提示塊標籤</p>
</div>

<div class="note primary modern"><p>primary 提示塊標籤</p>
</div>

<div class="note success modern"><p>success 提示塊標籤</p>
</div>

<div class="note info modern"><p>info 提示塊標籤</p>
</div>

<div class="note warning modern"><p>warning 提示塊標籤</p>
</div>

<div class="note danger modern"><p>danger 提示塊標籤</p>
</div>

]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>待续</title>
    <url>/2/</url>
    <content><![CDATA[<p>谁控制了过去，谁就控制了未来；谁能控制现在，也就控制了过去<br>爱情,拉丁文做amor,起始于爱慕,终结于死亡。但在此之前,是无尽的怅惘,忧伤,悲泣,欺骗,罪恶,懊丧<br>热情最会伪装，须知欲盖反而弥彰;犹如乌云越黑，越是显示有可怕的风暴<br>爱情，造就平等，却不追求平等<br>一直沉迷过去活到现在的人，是无法和别人拥有羁绊的<br>人生如逆旅，不进则退<br>追求卓越成功便紧随其后<br>不要让年轻时射出的子弹击中未来的自己</p>
]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>常用c语言数据类型与转义序列</title>
    <url>/3/</url>
    <content><![CDATA[<h1 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h1><h2 id="1-有符号"><a href="#1-有符号" class="headerlink" title="1.有符号"></a>1.有符号</h2><p>类型                  对应使用关键字符<br>short                 %hd<br>int                   %d<br>long                  %ld<br>long long             %lld<br>有符号类型前面可以加signed强调是有符号类型，例如：signed int</p>
<h2 id="2-无符号"><a href="#2-无符号" class="headerlink" title="2.无符号"></a>2.无符号</h2><p>类型                  对应使用关键字符<br>unsigned short        %hu<br>unsigned int          %u<br>unsigned long         %lu<br>unsigned long long    %llu</p>
<h1 id="浮点形"><a href="#浮点形" class="headerlink" title="浮点形"></a>浮点形</h1><p>类型                   对应使用关键字符<br>flort                  %f<br>double                 %lf<br>long double            %Lf</p>
<h1 id="字符形"><a href="#字符形" class="headerlink" title="字符形"></a>字符形</h1><p>类型                   对应使用关键字符<br>char（单个字符）        %c<br>char（字符串）          %s</p>
<h1 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h1><p>转义序列                含义<br>\a                     警报<br>\b                     退格<br>\f                     换页<br>\n                     换行<br>\r                     回车<br>\t                     水平制表符<br>\v                     垂直制表符<br>\\                     反斜杠<br>\‘                     单引号<br>\“                     双引号<br>\?                     问号<br>\0oo                   八进制值（o表示0到7中的一个数）<br>\xhh                   十六进制数（h表示0到f中的一个数）</p>
<h1 id="八进制与十六进制"><a href="#八进制与十六进制" class="headerlink" title="八进制与十六进制"></a>八进制与十六进制</h1><p>用十进制打印               %d<br>用八进制打印               %o<br>用十六进制打印             %x<br>用八进制打印显示进制前缀    %#o (例如十进制100对应八进制0144)<br>用十六进制打印显示进制前缀  %#x,%#X（例如十进制100对应十六进制0x64,0X64）</p>
<h1 id="数据类型大小"><a href="#数据类型大小" class="headerlink" title="数据类型大小"></a>数据类型大小</h1><p>用siezof(目标)计算，大小用%zd打印出</p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>c知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言简单超市库存管理系统</title>
    <url>/4/</url>
    <content><![CDATA[<p>推荐使用devc++直接打开<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;string.h&gt;</p>
<p>struct stu<br>{<br>    int id;<br>    char name[50];<br>    char place[50];<br>    int number;<br>    int price;<br>};<br>struct stu str[1000];<br>int choose_number;&#x2F;&#x2F;用于操作选项的数字<br>int n&#x3D;0;&#x2F;&#x2F;表示库里有多少商品</p>
<p>void wel_come();&#x2F;&#x2F;欢迎页面<br>void choo_se00();&#x2F;&#x2F;选择菜单<br>void choo_se01();&#x2F;&#x2F;新购商品入库<br>void choo_se02();&#x2F;&#x2F;物品信息删除<br>void choo_se03();&#x2F;&#x2F;物品信息修改<br>void choo_se04();&#x2F;&#x2F;物品信息查询<br>void choo_se05();&#x2F;&#x2F;物品信息浏览<br>void choo_se06();&#x2F;&#x2F;程序颜色更改<br>void choo_se07();&#x2F;&#x2F;应用程序退出</p>
<p>int main ()<br>{<br>    memset(str,0,sizeof(str));<br>    str[0].id&#x3D;1;<br>    strcpy(str[0].name,”苹果”);<br>    strcpy(str[0].place,”烟台”);<br>    str[0].number&#x3D;20;<br>    str[0].price&#x3D;3;<br>    n++;<br>    wel_come();<br>    choo_se00();	<br>    while(1)<br>    {<br>        printf(“请输入下一步操作\n”);<br>        scanf(“%d”,&amp;choose_number);<br>        if(choose_number&#x3D;&#x3D;7)<br>        {<br>            system(“cls”);<br>            choo_se07();<br>        }<br>        if(choose_number&#x3D;&#x3D;1)<br>        {<br>            system(“cls”);<br>            choo_se01();<br>        }<br>        if(choose_number&#x3D;&#x3D;2)<br>        {<br>            system(“cls”);<br>            choo_se02();<br>        }<br>        if(choose_number&#x3D;&#x3D;3)<br>        {<br>            system(“cls”);<br>            choo_se03();<br>        }<br>        if(choose_number&#x3D;&#x3D;4)<br>        {<br>            system(“cls”);<br>            choo_se04();<br>        }<br>        if(choose_number&#x3D;&#x3D;5)<br>        {<br>            system(“cls”);<br>            choo_se05();<br>        }<br>        if(choose_number&#x3D;&#x3D;6)<br>        {<br>            system(“cls”);<br>            choo_se06();<br>        }<br>        system(“cls”);<br>        choo_se00();		<br>    }<br>    return 0;<br>}</p>
<p>void wel_come()<br>{<br>    char a[14][100]&#x3D;{<br>    “<em>**************************************************************************************”,<br>    “*                                                                                     <em>“,<br>    “</em>                                       欢迎使用                                      <em>“,<br>    “</em>                                                                                     <em>“,<br>    “</em>————————————————————————————-<em>“,<br>    “</em>                                                                                     <em>“,<br>    “</em>                                                                                     <em>“,<br>    “</em>                                     超市库管理系统                                  <em>“,<br>    “</em>                                                                                     <em>“,<br>    “</em>————————————————————————————-<em>“,<br>    “</em>                                                                                     <em>“,<br>    “</em>                                      按任意键退出                                   <em>“,<br>    “</em>                                                                                     <em>“,<br>    “</em>*********************************************************************************</em>****”<br>    };<br>    int i;<br>    for(i&#x3D;0;i&lt;3;i++)<br>    {<br>        printf(“\n”);<br>    }<br>    for(i&#x3D;0;i&lt;14;i++)<br>    {<br>        printf(“                  “);<br>        printf(“%s\n”,a[i]);<br>    }<br>    getchar();<br>    system(“cls”);<br>}</p>
<p>void choo_se00()<br>{<br>    int i;<br>    for(i&#x3D;0;i&lt;3;i++)<br>    {<br>        printf(“\n”);<br>    }<br>    char b[10][100]&#x3D;{<br>            “         <em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>【超市库存管理系统】</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>******”,<br>            “         *———————————-系统菜单如下—————————————**”,<br>            “         <strong>1&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;【          新购商品入库          】&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong>“,<br>            “         <strong>2&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;【          物品信息删除          】&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong>“,<br>            “         <strong>3&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;【          物品信息修改          】&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong>“,<br>            “         <strong>4&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;【          物品信息查询          】&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong>“,<br>            “         <strong>5&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;【          物品信息浏览          】&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong>“,<br>            “         <strong>6&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;【          系统颜色更改          】&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong>“,<br>            “         <strong>7&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;【          应用程序退出          】&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong>“,<br>            “         ****************************************************************************************”<br>            };<br>    for(i&#x3D;0;i&lt;10;i++)<br>    printf(“%s\n”,b[i]);<br>}</p>
<p>void choo_se01()<br>{<br>    printf(“物品的编号：\n”);<br>    printf(“物品的名称：\n”);<br>    printf(“物品的产地：\n”);<br>    printf(“物品的数量：\n”);<br>    printf(“物品的单价：\n”);<br>    scanf(“%d %s %s %d %d”,&amp;str[n].id,str[n].name,str[n].place,&amp;str[n].number,&amp;str[n].price);	<br>    n++;<br>    printf(“物品信息已入库成功！”);<br>    printf(“是否要继续入库！(y&#x3D;是,其余是否)\n”);<br>    char a;<br>    getchar();<br>    a&#x3D;getchar();<br>    while(a&#x3D;&#x3D;’y’)<br>    {<br>        scanf(“%d %s %s %d %d”,&amp;str[n].id,str[n].name,str[n].place,&amp;str[n].number,&amp;str[n].price);<br>        n++;<br>        printf(“物品信息已入库成功！”);<br>        printf(“是否要继续入库！(y&#x3D;是,其余是否)\n”);<br>        getchar();<br>        a&#x3D;getchar();<br>    }<br>    system(“cls”);<br>    return;<br>}</p>
<p>void choo_se02()<br>{<br>    printf(“请输入要删除商品名字\n”);<br>    char a&#x3D;’y’;<br>    while(a&#x3D;&#x3D;’y’)<br>    {<br>        char arr[50];<br>        getchar();<br>        scanf(“%s”,arr);<br>        int i,j&#x3D;0;<br>        for(i&#x3D;0;i&lt;n;i++)<br>        {<br>            if(!strcmp(arr,str[i].name))<br>            {<br>                memset(&amp;str[i],0,sizeof(str[i]));<br>                printf(“删除成功\n”);<br>                j++;<br>            }<br>        }<br>        if(!j)<br>        {<br>            printf(“输入出错\n”);<br>        }<br>        getchar();<br>        printf(“是否要继续删除(y等于是，其余等于否)\n”);<br>        scanf(“%c”,&amp;a);<br>    }<br>    return;<br>}</p>
<p>void choo_se03()<br>{<br>    printf(“请输入要修改商品名字\n”);<br>    char a&#x3D;’y’;<br>    while(a&#x3D;&#x3D;’y’)<br>    {<br>    char arr[50];<br>    getchar();<br>    scanf(“%s”,arr);<br>    int i,j&#x3D;0;<br>    for(i&#x3D;0;i&lt;n;i++)<br>    {<br>        if(!strcmp(arr,str[i].name))<br>        {<br>            printf(“物品的编号:%d  物品的名称:%s  物品的产地:%s  物品的数量:%d  物品的单价:%d\n”,str[i].id,str[i].name,str[i].place,str[i].number,str[i].price);<br>            j++;<br>            printf(“请选择要修改的选项(1物品的编号 2物品的名称 3物品的产地 4物品的数量 5物品的单价 6退出该商品信息修改)\n”);<br>            while(1)<br>            {<br>                int k;<br>                getchar();<br>                scanf(“%d”,&amp;k);<br>                if(k&#x3D;&#x3D;1)<br>                {				<br>                    printf(“请修改物品的编号：\n”);<br>                    getchar();<br>                    scanf(“%d”,&amp;str[i].id);<br>                }<br>                if(k&#x3D;&#x3D;2)<br>                {<br>                    char arr[50];<br>                    printf(“请修改物品的名称：\n”);<br>                    getchar();<br>                    scanf(“%s”,arr);<br>                    strcpy(str[i].name,arr);<br>                }<br>                if(k&#x3D;&#x3D;3)<br>                {<br>                    char arr[50];<br>                    printf(“请修改物品的产地：\n”);	<br>                    getchar();<br>                    scanf(“%s”,arr);<br>                    strcpy(str[i].place,arr);<br>                }<br>                if(k&#x3D;&#x3D;4)<br>                {<br>                    printf(“请修改物品的数量：\n”);<br>                    getchar();<br>                    scanf(“%d”,&amp;str[i].number);<br>                }<br>                if(k&#x3D;&#x3D;5)<br>                {<br>                    printf(“请修改物品的单价：\n”);		<br>                    getchar();<br>                    scanf(“%d”,&amp;str[i].price);<br>                }<br>                if(k&#x3D;&#x3D;6)<br>                break;<br>                printf(“请继续选择修改其他选项或者退出\n”);<br>            }		<br>        }<br>    }<br>    if(!j)<br>    {<br>        printf(“输入出错\n”);<br>    }<br>    printf(“是否要修改其他商品(y等于是，其余等于否)\n”);<br>    getchar();<br>    scanf(“%c”,&amp;a);<br>    }	<br>    return;<br>}</p>
<p>void choo_se04()<br>{<br>    printf(“请输入要查询商品名字\n”);<br>    char a&#x3D;’y’;<br>    while(a&#x3D;&#x3D;’y’)<br>    {<br>    char arr[50];<br>    getchar();<br>    scanf(“%s”,arr);<br>    int i,j&#x3D;0;<br>    for(i&#x3D;0;i&lt;n;i++)<br>    {<br>        if(!strcmp(arr,str[i].name))<br>        {<br>            printf(“物品的编号:%d  物品的名称:%s  物品的产地:%s  物品的数量:%d  物品的单价:%d\n”,str[i].id,str[i].name,str[i].place,str[i].number,str[i].price);<br>            j++;<br>        }<br>    }<br>    if(!j)<br>    {<br>        printf(“输入出错\n”);<br>    }<br>    getchar();<br>    printf(“是否要继续查询(y等于是，其余等于否)\n”);<br>    scanf(“%c”,&amp;a);<br>    }<br>    return;<br>}</p>
<p>void choo_se05()<br>{<br>    int i;<br>    for(i&#x3D;0;i&lt;n;i++)<br>    {<br>        if(str[i].id!&#x3D;0)<br>        printf(“物品的编号:%d  物品的名称:%s  物品的产地:%s  物品的数量:%d  物品的单价:%d\n”,str[i].id,str[i].name,str[i].place,str[i].number,str[i].price);<br>    }<br>    getchar();<br>    getchar();<br>}</p>
<p>void choo_se06()<br>{<br>    char arr[8][50]&#x3D;{<br>    “0&#x3D;黑色      8&#x3D;灰色”,<br>    “1&#x3D;蓝色      9&#x3D;淡蓝色”,<br>    “2&#x3D;绿色      10&#x3D;淡绿色”,<br>    “3&#x3D;浅绿色    11&#x3D;淡浅绿色”,<br>    “4&#x3D;红色      12&#x3D;淡红色”,<br>    “5&#x3D;紫色      13&#x3D;淡紫色”,<br>    “6&#x3D;黄色      14&#x3D;淡黄色”,<br>    “7&#x3D;白色      15&#x3D;淡白色”};<br>    int i;<br>    for(i&#x3D;0;i&lt;8;i++)<br>    printf(“%s\n”,arr[i]);<br>    printf(“!!背景色和前景色请不要选成一样\n”);<br>    char a&#x3D;’y’;<br>    while(a&#x3D;&#x3D;’y’)<br>    {<br>    int bg, fg;<br>    printf(“请选择背景色(0-15):\n”);<br>    scanf(“%d”, &amp;bg);<br>    printf(“请选择前景色(0-15):\n”);<br>    scanf(“%d”, &amp;fg);<br>    char command[50];<br>    sprintf(command, “color %x%x”, bg, fg);<br>    system(command);<br>    getchar();<br>    printf(“是否要继续更改颜色(y等于是，其余等于否)\n”);<br>    scanf(“%c”,&amp;a);<br>    }	<br>    return;<br>}</p>
<p>void choo_se07()<br>{<br>    printf(“是否要退出(y等于是，其余等于否)\n”);<br>    getchar();<br>    char a;<br>    scanf(“%c”,&amp;a);<br>    if(a&#x3D;&#x3D;’y’)<br>    {<br>        exit(0);<br>    }<br>    else<br>    {<br>        return;<br>    }<br>}</p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>c代码</tag>
      </tags>
  </entry>
  <entry>
    <title>链表：插入数据</title>
    <url>/5/</url>
    <content><![CDATA[<h1 id="开头插入"><a href="#开头插入" class="headerlink" title="开头插入"></a>开头插入</h1><h2 id="插入数据方法"><a href="#插入数据方法" class="headerlink" title="插入数据方法"></a>插入数据方法</h2><p> 方法1<br> struct Node* temp&#x3D;(struct Node*)malloc(sizeof(struct Node));        &#x2F;&#x2F;创建新的内存空间<br> temp-&gt;date&#x3D;x;        &#x2F;&#x2F;赋予你要插入的值X<br> temp-&gt;next&#x3D;NULL;        &#x2F;&#x2F;让新的节点的后继指针指向NULL<br> if(head!&#x3D;NULL)<br> {<br>     temp-&gt;next&#x3D;head;<br> }        &#x2F;&#x2F;如果头指针head不等于空，则说明链表里面已经有元素了，不能直接让头指针等于该节点，应该让该节点的后继指针指向head指向的值,因为之前head指向的第一个节点，现在又新建节点指向第一个节点，所以第一个节点变成了第二个节点，该新节点成了第一个节点。如果把链表比作是用桥连接的岛，那么节点就是小岛，而head只是一架桥（指针指向指针就像桥直接连接了桥，只有岛才是数据）<br>    head&#x3D;temp;        &#x2F;&#x2F;现在又重新将头指针head指向第一个节点，也就是该节点，这样又重新让head指向了第一个节点。如果head最开始指向空，也就是链表里面没有元素，那新的元素就是第一个元素，直接让head指向该元素就可以了</p>
<pre><code>方法2
Node* temp=(struct Node*)malloc(sizeof(struct Node));        
temp-&gt;date=x;
temp-&gt;next=head;
head=temp;
//该方法是直接让新建节点的后继指针指向头指针head指向的值，如果链表里面不为空，则因为之前head指向的第一个节点，现在又新建节点指向第一个节点，所以第一个节点变成了第二个节点，该新节点成了第一个节点。如果head最开始指向空，也就是链表里面没有元素，那新的元素就是第一个元素，直接让head指向该元素就可以了
</code></pre>
<h2 id="打印数据"><a href="#打印数据" class="headerlink" title="打印数据"></a>打印数据</h2><p>void Print()<br>{<br>    struct Node* temp&#x3D;head;&#x2F;&#x2F;从头开始打印数据<br>    printf(“链表为: “);<br>    while(temp!&#x3D;NULL)&#x2F;&#x2F;直到打印到空时没有数据了<br>    {<br>        printf(“%d “,temp-&gt;date);<br>        temp&#x3D;temp-&gt;next;<br>    }<br>    printf(“\n\n”);<br>}</p>
<h2 id="释放链表的所有节点内存"><a href="#释放链表的所有节点内存" class="headerlink" title="释放链表的所有节点内存"></a>释放链表的所有节点内存</h2><p>   手动释放空间，如果没有该语句则在程序关闭时自己释放空间，释放空间后最好将节点&#x3D;NULL,这样可以方便检查是否为NULL来确定节点是否已被释放，还能防止下次不小心调用到节点的时候出错，这种做法有助于提高程序的健壮性和稳定性。</p>
<pre><code>while (head != NULL)
&#123;
     struct Node* temp = head;
    head = head-&gt;next;
    free(temp);

    temp=NULL;
&#125;
</code></pre>
<p>手动释放内存并将指针设置为NULL是一个良好的编程习惯，可以有效地管理内存，并且能够增加代码的可读性和可维护性。</p>
<h2 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h2><p>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>struct Node<br>{<br>    int date;<br>    struct Node* next;<br>};<br>struct Node* head;&#x2F;&#x2F;头指针<br>void Insert(int x)&#x2F;&#x2F;插入<br>{<br>    &#x2F;&#x2F;方法1<br>    struct Node* temp&#x3D;(struct Node*)malloc(sizeof(struct Node));<br>    temp-&gt;date&#x3D;x;<br>    temp-&gt;next&#x3D;NULL;<br>    if(head!&#x3D;NULL)<br>    {<br>        temp-&gt;next&#x3D;head;<br>    }<br>    head&#x3D;temp;</p>
<pre><code>//方法2
/*
Node* temp=(struct Node*)malloc(sizeof(struct Node));        
temp-&gt;date=x;
temp-&gt;next=head;
head=temp;
*/
</code></pre>
<p>}<br>void Print()&#x2F;&#x2F;打印<br>{<br>    struct Node* temp&#x3D;head;<br>    printf(“链表为: “);<br>    while(temp!&#x3D;NULL)<br>    {<br>        printf(“%d “,temp-&gt;date);<br>        temp&#x3D;temp-&gt;next;<br>    }<br>    printf(“\n\n”);<br>}<br>int main ()<br>{<br>    head&#x3D;NULL;<br>    int x,n,i;<br>    printf(“您想输入多少个数字？\n”);<br>    scanf(“%d”,&amp;n);<br>    for(i&#x3D;0;i&lt;n;i++)<br>{<br>        printf(“请输入数据\n”);<br>        scanf(“%d”,&amp;x);<br>        Insert(x);<br>        Print();<br>    }<br>    &#x2F;&#x2F; 释放链表的所有节点内存<br>    while (head !&#x3D; NULL)<br>    {<br>           struct Node* temp &#x3D; head;<br>        head &#x3D; head-&gt;next;<br>        free(temp);<br>    }<br>    return 0;<br>}</p>
<h1 id="任意位置插入数据"><a href="#任意位置插入数据" class="headerlink" title="任意位置插入数据"></a>任意位置插入数据</h1><h2 id="插入数据方法-1"><a href="#插入数据方法-1" class="headerlink" title="插入数据方法"></a>插入数据方法</h2><p>void Insert(int date,int n)&#x2F;&#x2F;date表示插入的数据，n表示插入的位置<br>{<br>    struct Node* temp1&#x3D;(struct Node*)malloc(sizeof(struct Node));<br>    temp1-&gt;date&#x3D;date;<br>    temp1-&gt;next&#x3D;NULL;<br>    if(n&#x3D;&#x3D;1)&#x2F;&#x2F;在头部插入<br>    {<br>        temp1-&gt;next&#x3D;head;&#x2F;&#x2F;在头部插入的时候用的是头部插入数据法二<br>        head&#x3D;temp1;<br>        return;<br>    }<br>    struct Node* temp2&#x3D;head;&#x2F;&#x2F;如果不是在第一个位置插入数据则再新建一个节点<br>    int i;<br>    for(i&#x3D;0;i&lt;n-2;i++)&#x2F;&#x2F;如果要插在第n个节点，则要先找到第n-1个节点。如果要插在第5个节点,则要先找到第4个节点，进行3次循环<br>   temp2&#x3D;temp2-&gt;next;  &#x2F;&#x2F;到达n-1个节点<br>   <img src="https://s2.loli.net/2023/07/15/QB4WeIA8rbvm9Yu.png" alt="2.png"><br>    temp1-&gt;next&#x3D;temp2-&gt;next;新节点的后继指针指向第n个节点<br>    temp2-&gt;next&#x3D;temp1; 第n-1个节点的后继指针指向新的节点，则新的节点成功成为第n个数据，插入数据成功<br>   <img src="https://s2.loli.net/2023/07/15/VSfB48Ckyzt1wlv.png" alt="1.png"></p>
<p> }</p>
<h2 id="打印数据-1"><a href="#打印数据-1" class="headerlink" title="打印数据"></a>打印数据</h2><p>void Print()<br>{<br>    printf(“链表为:”);<br>    struct Node* temp&#x3D;head;<br>    while(temp!&#x3D;NULL)<br>    {<br>        printf(“%d “,temp-&gt;date);<br>        temp&#x3D;temp-&gt;next;<br>    }<br>    printf(“\n\n”);<br>}</p>
<h2 id="手动释放数据"><a href="#手动释放数据" class="headerlink" title="手动释放数据"></a>手动释放数据</h2><p>while (head !&#x3D; NULL)<br>    {<br>        struct Node* temp &#x3D; head;<br>        head &#x3D; head-&gt;next;<br>        free(temp);<br>        temp&#x3D;NULL;<br>    }</p>
<p>##完整版<br>#include&lt;stdio.h&gt;<br>#include&lt;stdlib.h&gt;<br>struct Node<br>{<br>    int date;<br>    struct Node* next;<br>};<br>struct Node* head;<br>void Insert(int date,int n)<br>{<br>    struct Node* temp1&#x3D;(struct Node*)malloc(sizeof(struct Node));<br>    temp1-&gt;date&#x3D;date;<br>    temp1-&gt;next&#x3D;NULL;<br>    if(n&#x3D;&#x3D;1)&#x2F;&#x2F;在头部插入<br>    {<br>        temp1-&gt;next&#x3D;head;<br>        head&#x3D;temp1;<br>        return;<br>    }<br>    struct Node* temp2&#x3D;head;<br>    int i;<br>    for(i&#x3D;0;i&lt;n-2;i++)<br>   temp2&#x3D;temp2-&gt;next;<br>    temp1-&gt;next&#x3D;temp2-&gt;next;<br>    temp2-&gt;next&#x3D;temp1;<br>}<br>void Print()<br>{<br>    printf(“链表为:”);<br>    struct Node* temp&#x3D;head;<br>    while(temp!&#x3D;NULL)<br>    {<br>        printf(“%d “,temp-&gt;date);<br>        temp&#x3D;temp-&gt;next;<br>    }<br>    printf(“\n\n”);<br>}<br>int main ()<br>{<br>    head&#x3D;NULL;<br>    Insert(5,1);&#x2F;&#x2F;5<br>    Insert(3,2);&#x2F;&#x2F;5 3<br>    Insert(4,1);&#x2F;&#x2F;4 5 3<br>    Insert(1,3);&#x2F;&#x2F;4 5 1 3<br>    Print();<br>    &#x2F;&#x2F; 释放链表的所有节点内存<br>    while (head !&#x3D; NULL)<br>    {<br>        struct Node* temp &#x3D; head;<br>        head &#x3D; head-&gt;next;<br>        free(temp);<br>        temp&#x3D;NULL;<br>    }<br>    return 0;<br>}</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c代码</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言头文件limits.h和float.h中常用明示常量的值</title>
    <url>/6/</url>
    <content><![CDATA[<h1 id="limits-h"><a href="#limits-h" class="headerlink" title="limits.h"></a>limits.h</h1><p>CHAR_BIT：8<br>SCHAR_MIN：-128<br>SCHAR_MAX：127<br>UCHAR_MAX：255<br>CHAR_MIN：-128<br>CHAR_MAX：127<br>MB_LEN_MAX：16<br>SHRT_MIN：-32768<br>SHRT_MAX：32767<br>USHRT_MAX：65535<br>INT_MIN：-2147483648<br>INT_MAX：2147483647<br>UINT_MAX：4294967295<br>LONG_MIN：-9223372036854775808<br>LONG_MAX：9223372036854775807<br>ULONG_MAX：18446744073709551615<br>LLONG_MIN：-9223372036854775808<br>LLONG_MAX：9223372036854775807<br>ULLONG_MAX：18446744073709551615</p>
<h1 id="float-h"><a href="#float-h" class="headerlink" title="float.h"></a>float.h</h1><p>FLT_RADIX：2<br>FLT_ROUNDS：1<br>FLT_DIG：6<br>FLT_EPSILON：1.19209290e-07F<br>FLT_MANT_DIG：24<br>FLT_MAX：3.40282347e+38F<br>FLT_MAX_10_EXP：38<br>FLT_MAX_EXP：128<br>FLT_MIN：1.17549435e-38F<br>FLT_MIN_10_EXP：(-37)<br>FLT_MIN_EXP：(-125)<br>DBL_DIG：15<br>DBL_EPSILON：2.2204460492503131e-16<br>DBL_MANT_DIG：53<br>DBL_MAX：1.7976931348623158e+308<br>DBL_MAX_10_EXP：308<br>DBL_MAX_EXP：1024<br>DBL_MIN：2.2250738585072014e-308<br>DBL_MIN_10_EXP：(-307)<br>DBL_MIN_EXP：(-1021)<br>LDBL_DIG：18<br>LDBL_EPSILON：1.0842021724855044e-19L<br>LDBL_MANT_DIG：64<br>LDBL_MAX：1.1897314953572318e+4932L<br>LDBL_MAX_10_EXP：4932<br>LDBL_MAX_EXP：16384<br>LDBL_MIN：3.3621031431120936e-4932L<br>LDBL_MIN_10_EXP：(-4931)<br>LDBL_MIN_EXP：(-16381)</p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>c知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言printf与scanf扩展篇</title>
    <url>/7/</url>
    <content><![CDATA[<h1 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h1><h2 id="printf转换说明"><a href="#printf转换说明" class="headerlink" title="printf转换说明"></a>printf转换说明</h2><p>转换说明	输出<br>%a，%A	浮点数，十六进制数与p记数法（P记数法）</p>
<p>%c	单个字符</p>
<p>%d	有符号十进制整数</p>
<p>%e,%E	浮点数，e记数法（E记数法）</p>
<p>%f	浮点数，十进制记数法</p>
<p>%g,%G	自动选择%e(%E),%f。%e(%E)格式用于指数小于-4或者大于等于精度时</p>
<p>%i	与%d相同</p>
<p>%o	无符号八进制整数</p>
<p>%p	指针</p>
<p>%s	字符串</p>
<p>%u	无符号十进制整数</p>
<p>%x,%X	无符号十六进制整数，适用十六进制数0f（0F）</p>
<p>%%	打印一个%</p>
<p>%i和%d的相同之处可以追溯到C语言的历史。最初，%d用于打印有符号十进制整数，而%i用于打印无符号或有符号的十进制整数。然而，从实际应用角度来看，很少需要打印无符号十进制整数。因此，在实践中，%d逐渐成为打印无符号和有符号十进制整数的通用转换说明符，而%i则被视为%d的一个别名。</p>
<h2 id="printf修饰符"><a href="#printf修饰符" class="headerlink" title="printf修饰符"></a>printf修饰符</h2><p>修饰符	含义<br>标记	共+，-，空格，#，0五种,可以一起使用或者不使用</p>
<p>数字	最小字段宽度超出的话系统会自动使用更大的宽度</p>
<p>.数字	精度</p>
<p>h,hh,j,l,ll,L,t,z	和转换说明一起使用</p>
<p>&#x2F;*	抑制字符</p>
<h3 id="printf中-用法"><a href="#printf中-用法" class="headerlink" title="printf中*用法"></a>printf中*用法</h3><p>int main ()<br>{<br>    int a,b;<br>    int n&#x3D;256;<br>    double w&#x3D;242.5;<br>    scanf(“%d”,&amp;a);<br>    printf(“n&#x3D;%<em>d\n”,a,n);<br>    scanf(“%d %d”,&amp;a,&amp;b);<br>    printf(“w&#x3D;%</em>.*lf\n”,a,b,w);<br>    return 0;<br>}</p>
<p>输入</p>
<p>6&#x2F;&#x2F;意思宽度为6</p>
<p>输出</p>
<p>n&#x3D;空3格256</p>
<p>输入</p>
<p>8 3&#x2F;&#x2F;意思宽度为8，保留三位小数</p>
<p>输出</p>
<p>w&#x3D;空一格242.500</p>
<h2 id="printf中的标记"><a href="#printf中的标记" class="headerlink" title="printf中的标记"></a>printf中的标记</h2><p>标记	含义<br>-	左对齐，从左侧开始答应</p>
<ul>
<li>   用于有符号值显示符号，例“%+6.2f”</li>
</ul>
<p>空格	有符号为正则不显示符号，为负则显示处负号</p>
<p>&#x2F;#	把结果转换为另一种形式。如%o则以0开始，%x,%X从0x,0X开始,对于所有浮点格式，#保证了即使后面没有任何数字，也打印一个小数点字符。对于%g,%G格式，防止后面的0被删除</p>
<p>0	对于数值格式，用前导0代替空格填补字段宽度。对于整数格式，如果出现-标记或者指定精度，则忽略该标记</p>
<h2 id="printf多种打印方式"><a href="#printf多种打印方式" class="headerlink" title="printf多种打印方式"></a>printf多种打印方式</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>    printf(“1”);<br>    printf(“23\n”);
   </p>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>   printf(“1<br>   23\n”);</p>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>   printf(“1”<br>   “23\n”);</p>
<h1 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h1><h2 id="scanf的转换说明"><a href="#scanf的转换说明" class="headerlink" title="scanf的转换说明"></a>scanf的转换说明</h2><p>转换说明	含义</p>
<p>%c	把输入解释成字符</p>
<p>%d,%i	把输入解释成有符号十进制整数</p>
<p>%e,%E,%f,%F,%g,%G,%a,%A	把输入解释成浮点数</p>
<p>%o	把输入解释成有符号八进制整数</p>
<p>%p	把输入解释成指针</p>
<p>%s	把输入解释成字符串</p>
<p>%u	把输入解释成无符号十进制整数</p>
<p>%X,%x	把输入解释成有符号十六进制整数</p>
<h2 id="scanf中修饰符"><a href="#scanf中修饰符" class="headerlink" title="scanf中修饰符"></a>scanf中修饰符</h2><p>修饰符	含义<br>*	抑制字符</p>
<p>数字	最大字段宽度，例如%5s</p>
<p>hh,ll,h,l,L	类型读取，例如%hd</p>
<p>z,j,t	j表示intmax_t或者uintmax_t类型,z表示sizeof返回类型,t表示两个指针差值的类型</p>
<h2 id="scanf中抑制字符使用"><a href="#scanf中抑制字符使用" class="headerlink" title="scanf中抑制字符使用"></a>scanf中抑制字符使用</h2><p>#include&lt;stdio.h&gt;<br>int main ()<br>{<br>    int n;<br>    scanf(“%*d %*d %d”,&amp;n);<br>    printf(“%d\n”,n);<br>    return 0;<br>}</p>
<p>输入</p>
<p>6 7 8</p>
<p>输出</p>
<p>8</p>
<h2 id="常用scanf输入扩展"><a href="#常用scanf输入扩展" class="headerlink" title="常用scanf输入扩展"></a>常用scanf输入扩展</h2><h3 id="1-接受空格"><a href="#1-接受空格" class="headerlink" title="1.接受空格"></a>1.接受空格</h3><p>    char ch[100];<br>    scanf(“%[^\n]”,ch);<br>    puts(ch);</p>
<h3 id="2-scanf输入格式要对应"><a href="#2-scanf输入格式要对应" class="headerlink" title="2.scanf输入格式要对应"></a>2.scanf输入格式要对应</h3><p>    int a,b,c;<br>    scanf(“%d %d %d”,&amp;a,&amp;b,&amp;c);</p>
<h3 id="3-限定宽度"><a href="#3-限定宽度" class="headerlink" title="3.限定宽度"></a>3.限定宽度</h3><p>   int a,b,c;<br>   scanf(“%4d%4d%4d”,&amp;a,&amp;b,&amp;c);<br>   printf(“%d %d %d\n”,a,b,c);</p>
<h3 id="4-屏蔽数据类型"><a href="#4-屏蔽数据类型" class="headerlink" title="4.屏蔽数据类型"></a>4.屏蔽数据类型</h3><p>%*d屏蔽数字，%*c屏蔽字符 <br>    char arr[100]; <br>   scanf(“%*d%s”,arr);&#x2F;&#x2F;先输数字再输字符 <br>   printf(“%s”,arr);</p>
<h3 id="5-精确屏蔽"><a href="#5-精确屏蔽" class="headerlink" title="5.精确屏蔽"></a>5.精确屏蔽</h3><p>    char ch[100];<br>    scanf(“%[1-9]”,ch);&#x2F;&#x2F;先输数字1-9再输其他，屏蔽其他<br>    scanf(“%[^1-9]”,ch);&#x2F;&#x2F;先输其他再输数字，屏蔽数字1-9<br>    puts(ch);</p>
<h3 id="6-屏蔽一个区间内的"><a href="#6-屏蔽一个区间内的" class="headerlink" title="6.屏蔽一个区间内的"></a>6.屏蔽一个区间内的</h3><p>    char ch;<br>    scanf(“%*[a-zA-Z]%s”,ch);&#x2F;&#x2F;先输字母再输其他，屏蔽前面的字母<br>    puts(ch);<br>    printf(“%c\n”,ch);</p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>c知识点</tag>
      </tags>
  </entry>
</search>
